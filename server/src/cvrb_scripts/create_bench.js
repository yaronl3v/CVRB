#!/usr/bin/env node

/**
 * CVRB Benchmark World Cycle
 *
 * Step 1 ‚Äì Complete world cycle:
 *   1. Create N worlds (with validation)
 *   2. Solve all VALID worlds with a predefined set of solver models
 *   3. Promote the best worlds to benchmark set 1 based on quality_score
 *
 * No CLI args ‚Äì tweak constants below to change behaviour.
 */

import path from 'path';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';

import { CVRB } from '../CVRB/CVRB.js';
import { ModelsConfig } from '../openrouter/models.js';
import { promoteWorlds } from '../CVRB/helpers/world_promotion.js';
import { BenchmarkReporter } from '../tools/benchmark_reporter.js';

// ---------------------------------------------------------------------------
// Environment
// ---------------------------------------------------------------------------
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// Load env from project root
dotenv.config({ path: path.join(__dirname, '..', '..', '.env') });

// ---------------------------------------------------------------------------
// Configuration ‚Äì tweak as needed
// ---------------------------------------------------------------------------
const CREATE_WORLDS_AMOUNT = 4;    // How many worlds to generate per creator model
const PROMOTE_TOP = 2;             // Promote top-N worlds by quality_score
const EXCEPTIONAL_SCORE = 0.4;     // Threshold for automatic promotion

//left to  Opus
//+address no opus as solver

// Creator, validator and solver model selections (arrays for readability)
const CREATOR_MODELS = [ModelsConfig.CLAUDE_4_OPUS];
const VALIDATOR_MODELS = [ModelsConfig.O3];
const SOLVER_MODELS = [
  ModelsConfig.GROK_4,
  ModelsConfig.O3,
  ModelsConfig.O4_MINI_HIGH,
  ModelsConfig.GEMINI_2_5_PRO,
  ModelsConfig.GEMINI_2_5_FLASH,    
  ModelsConfig.CLAUDE_4_SONNET,
  ModelsConfig.DEEPSEEK_R1,
  ModelsConfig.QWEN3_THINKING,
];

const reporter = new BenchmarkReporter();

// ---------------------------------------------------------------------------
// Helper ‚Äì run the full cycle (create ‚Üí solve ‚Üí promote) for a single creator
// ---------------------------------------------------------------------------
async function processCreator (cvrb, creator) {
  const creatorName = typeof creator === 'string' ? creator : creator.apiName;
  console.log(`\n==============================`);
  console.log(`üöß  Processing creator: ${creatorName}`);

  // Start timing for this creator
  reporter.startCreator(creatorName);

  // 1. Create worlds (includes validation)
  const creations = await cvrb.generateWorlds(
    CREATE_WORLDS_AMOUNT,
    creator,
    {
      validatorModels: VALIDATOR_MODELS,
      saveToDb: true,
      runValidation: true,
    }
  );

  const validWorldIds = creations
    .filter(res => res?.dbRecord?.is_valid)
    .map(res => res.dbRecord.id);

  const invalidCount = creations.length - validWorldIds.length;
  reporter.finishCreatePhase({ valid: validWorldIds.length, invalid: invalidCount });

  if (!validWorldIds.length) {
    console.log(`‚ö†Ô∏è  No valid worlds generated by ${creatorName}. Skipping.`);
    reporter.endCreator();
    return [];
  }

  console.log(`‚úÖ Valid world IDs: ${validWorldIds.join(', ')}`);

  // 2. Solve the valid worlds with selected solver models
  await cvrb.solveWorlds(validWorldIds, {
    solverModels: SOLVER_MODELS,
    parallelModels: true,
  });
  reporter.finishSolvePhase({ solved: validWorldIds.length });

  // 3. Promote the best worlds
  const promoted = await promoteWorlds(validWorldIds, {
    promoteTop: PROMOTE_TOP,
    exceptionalScore: EXCEPTIONAL_SCORE,
  });

  if (promoted.length) {
    console.log(`üèÜ Promoted worlds (set=1): ${promoted.map(w => w.id).join(', ')}`);
  } else {
    console.log('‚ÑπÔ∏è  No worlds met promotion criteria.');
  }

  console.log(`üéØ Cycle completed for creator: ${creatorName}`);
  reporter.endCreator();
  return promoted;
}

// ---------------------------------------------------------------------------
// Main execution ‚Äì iterate creators sequentially
// ---------------------------------------------------------------------------
(async function main () {
  const cvrb = new CVRB();

  try {
    for (const creator of CREATOR_MODELS) {
      // eslint-disable-next-line no-await-in-loop
      await processCreator(cvrb, creator);
    }

    reporter.report();
    console.log('\n‚úÖ Benchmark world cycle completed for all creators.');
  } catch (err) {
    console.error('‚ùå Benchmark creation failed:', err);
    process.exit(1);
  } finally {
    await cvrb.close();
  }
})();

