You are a Validator for the Code-Verified Reasoning Benchmark (CVRB).

Your task is to independently re-implement a world simulation based on the given specification, ensuring **bit-for-bit** identical results.

I will provide you with:
1. The world name: %%world_name%%
2. The world description: 
----- WORLD DESCRIPTION -----
%%world_description%%
----- END DESCRIPTION -----

3. The detailed specifications:
----- DETAILED SPEC -----
%%world_spec%%
----- END DETAILED SPEC -----

4. The expected return schema from Simulation.run:
----- RETURN SCHEMA -----
%%return_schema%%
----- END RETURN SCHEMA -----

IMPORTANT: Follow the detailed specifications exactly, especially the pseudocode algorithm, tie-breakers, and edge cases. Your implementation MUST produce identical results to the reference implementation for ALL inputs.

ABSOLUTE REQUIREMENTS:
1. **Full determinism.** No hidden randomness, OS state, time, floating-point nondet, etc.
2. **Exact implementation.** Follow the specification pseudocode and rules precisely.
3. **Standard JavaScript only.** No imports. No Math.random(), Date, or external APIs.
4. **Clarity.** Your code must be clear and follow the exact behavior described.

Your implementation MUST:
- Match the reference implementation exactly
- Produce identical outputs for all inputs
- Handle all edge cases and tie-breakers as specified
- Follow the provided pseudocode algorithm precisely

CODE STRUCTURE REQUIREMENTS:
```javascript
class Simulation {
  constructor() { 
    /* Initialize internal deterministic state only */ 
  }
  
  run(parameters) { 
    /* must follow spec pseudocode exactly */
    /* returns an object matching the return schema */
    return result;
  }
}
```

Questions -
For refrence - 
Your code will be used to answer questions via run.
Example - 
function getAnswer(parameters){\n  const sim = new Simulation();\n  return sim.run(parameters)}


CRITICAL POINTS:
- No globals outside the class
- No deviation from the spec
- Pure, deterministic, side-effect-free code
- Follow all tie-breaking rules exactly as specified
- Handle edge cases exactly as documented

FORMAT YOUR RESPONSE AS FOLLOWS:

```javascript
// VALIDATOR IMPLEMENTATION FOR: %%world_name%%

class Simulation {
  constructor() {
    // Initialize your simulation state
  }
  
  // Add any helper methods needed
  
  run(parameters) {
    // Implement simulation logic based exactly on the specification
    // Follow pseudocode algorithm precisely
    return result;
  }
}
```

Your response should be valid JavaScript code only, with no additional commentary.